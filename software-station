#!/usr/local/bin/python3.6
"""
Copyright (c) 2017-2018, GhostBSD. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistribution's of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistribution's in binary form must reproduce the above
   copyright notice,this list of conditions and the following
   disclaimer in the documentation and/or other materials provided
   with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES(INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
"""

import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, GdkPixbuf, GLib, GObject
import threading
import crypt
import pwd
import os
from time import sleep


from software_station_pkg import search_packages, available_package_origin
from software_station_pkg import available_package_dictionary
from software_station_pkg import installed_package_origin
from software_station_pkg import installed_package_dictionary, delete_packages
from software_station_pkg import install_packages, fetch_packages
from software_station_pkg import selected_package_description
from software_station_pkg import selected_package_dependencies, selected_package_rdependencies
from software_station_xpm import xpmPackageCategory

global pkg_to_install
pkg_to_install = []

global pkg_to_uninstall
pkg_to_uninstall = []


class TableWindow(Gtk.Window):

    def __init__(self):
        Gtk.Window.__init__(self)
        self.set_title("Software Station")
        self.connect("delete-event", Gtk.main_quit)
        self.set_size_request(850, 500)
        # Creating the toolbar
        toolbar = Gtk.Toolbar()
        # toolbar.set_style(Gtk.ToolbarStyle.BOTH)
        self.box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.add(self.box1)
        self.box1.show()
        self.box1.pack_start(toolbar, False, False, 0)
        self.previousbutton = Gtk.ToolButton()
        self.previousbutton.set_label("Back")
        self.previousbutton.set_is_important(True)
        self.previousbutton.set_icon_name("go-previous")
        self.previousbutton.set_sensitive(False)
        toolbar.insert(self.previousbutton, 1)
        self.nextbutton = Gtk.ToolButton()
        self.nextbutton.set_label("Forward")
        self.nextbutton.set_is_important(True)
        self.nextbutton.set_icon_name("go-next")
        self.nextbutton.set_sensitive(False)
        toolbar.insert(self.nextbutton, 2)

        self.available_toggle = Gtk.RadioToolButton(label="All Software")
        self.available_toggle.set_icon_name("package_network")
        self.available_or_installed = 'available'
        self.available_toggle.connect("toggled", self.all_or_installed,
                                      "available")
        self.available_toggle.set_sensitive(False)
        toolbar.insert(self.available_toggle, 3)
        self.installed_toggle = Gtk.RadioToolButton(label="Installed Software",
                                                group=self.available_toggle)
        self.installed_toggle.set_icon_name("system")
        self.installed_toggle.connect("toggled", self.all_or_installed,
                                      "installed")
        self.installed_toggle.set_sensitive(False)
        toolbar.insert(self.installed_toggle, 4)
        separatortoolitem = Gtk.SeparatorToolItem()
        toolbar.insert(separatortoolitem, 5)
        toolitem = Gtk.ToolItem()
        toolbar.insert(toolitem, 6)
        toolitem.set_expand(True)
        self.entry = Gtk.Entry()
        self.entry.set_icon_from_icon_name(Gtk.EntryIconPosition.PRIMARY,
                                           "search")
        self.entry.connect("key-release-event", self.search_release)
        self.entry.set_sensitive(False)
        self.entry.set_visibility(False)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        toolitem.add(hBox)
        hBox.show()
        hBox.pack_start(self.entry, False, False, 0)
        self.apply_button = Gtk.Button()
        self.apply_button.set_label("Apply")
        apply_img = Gtk.Image()
        apply_img.set_from_icon_name('gtk-apply', 1)
        self.apply_button.set_image(apply_img)
        self.apply_button.set_property("tooltip-text",
                                       "Apply change on the system")
        self.apply_button.set_sensitive(False)
        hBox.pack_end(self.apply_button, False, False, 0)
        self.cancel_button = Gtk.Button()
        self.cancel_button.set_label("Cancel")
        cancel_img = Gtk.Image()
        cancel_img.set_from_icon_name('gtk-cancel', 1)
        self.cancel_button.set_image(cancel_img)
        self.cancel_button.set_sensitive(False)
        self.cancel_button.set_property("tooltip-text", "Cancel changes")
        hBox.pack_end(self.cancel_button, False, False, 0)
        self.apply_button.connect("clicked", self.apply_change)
        self.cancel_button.connect("clicked", self.cancel_change)
        # Creating a notebook to switch
        self.mainstack = Gtk.Stack()
        self.mainstack.show()
        self.mainstack.set_transition_type(Gtk.StackTransitionType.SLIDE_LEFT)
        self.box1.pack_start(self.mainstack, True, True, 0)
        mainwin = self.MainBook()
        descwin = self.DescriptionWindow()
        self.mainstack.add_named(mainwin, "mainwin")
        self.mainstack.add_named(descwin, "descwin")
        self.pkg_statistic = Gtk.Label()
        self.pkg_statistic.set_use_markup(True)
        self.pkg_statistic.set_xalign(0.0)
        self.progress = Gtk.ProgressBar()
        self.progress.set_show_text(True)
        grid = Gtk.Grid()
        grid.set_column_spacing(10)
        grid.set_margin_start(10)
        grid.set_margin_end(10)
        grid.set_margin_top(10)
        grid.set_margin_bottom(10)
        grid.set_column_homogeneous(True)
        grid.set_row_homogeneous(True)
        grid.attach(self.pkg_statistic, 0, 0, 4, 1)
        grid.attach(self.progress, 4, 0, 6, 1)
        grid.show()
        self.box1.pack_start(grid, False, False, 0)
        self.show_all()
        self.initial_thread('initial')

    def cancel_change(self, widget):
        global pkg_to_uninstall
        global pkg_to_install
        pkg_to_install = []
        pkg_to_uninstall = []
        pkg_selection = self.pkgtreeview.get_selection()
        (model, iter) = pkg_selection.get_selected()
        try:
            pkg_path = model.get_path(iter)
        except KeyError:
            nopath = True
        else:
            nopath = False

        try:
            self.searchs
        except AttributeError:
            self.update_pkg_store()
        else:
            self.update_search()
        if nopath is False:
            self.pkgtreeview.set_cursor(pkg_path)
        self.apply_button.set_sensitive(False)
        self.cancel_button.set_sensitive(False)

    def apply_change(self, widget):
        # window to confirm installation and deleting pkg
        self.apply_button.set_sensitive(False)
        self.cancel_button.set_sensitive(False)
        self.apply_thr = threading.Thread(target=self.apply_package_change,
                                          args=())
        self.apply_thr.setDaemon(True)
        self.apply_thr.start()

    def stop_apply_tread(self):
        self.apply_thr.join()

    def apply_package_change(self):
        self.progress.show()
        global pkg_to_uninstall
        global pkg_to_install
        un_num = len(pkg_to_uninstall)
        in_num = len(pkg_to_install)
        num = un_num + (in_num * 2) + 1

        fraction = 0
        encriment = 1.0 / num
        for pkg in pkg_to_uninstall:
            msg = f"Uninstalling {pkg}"
            GLib.idle_add(self.update_progress, self.progress, fraction, msg)
            dpkg = delete_packages(pkg)
            while True:
                line = dpkg.readline()
                if not line:
                    break
                msg = line.rstrip()
                print(msg)
                GLib.idle_add(self.update_progress, self.progress, fraction, msg)
            fraction += encriment

        for pkg in pkg_to_install:
            msg = f"Fetching {pkg}"
            GLib.idle_add(self.update_progress, self.progress, fraction, msg)
            dpkg = fetch_packages(pkg)
            while True:
                line = dpkg.readline()
                if not line:
                    break
                msg = line.rstrip()
                print(msg)
                GLib.idle_add(self.update_progress, self.progress, fraction, msg)
            fraction += encriment

        for pkg in pkg_to_install:
            msg = f"Installing {pkg}"
            GLib.idle_add(self.update_progress, self.progress, fraction, msg)
            dpkg = install_packages(pkg)
            while True:
                line = dpkg.readline()
                if not line:
                    break
                msg = line.rstrip()
                print(msg)
                GLib.idle_add(self.update_progress, self.progress, fraction, msg)
            fraction += encriment
        msg = 'Updating data'
        GLib.idle_add(self.update_progress, self.progress, fraction, msg)
        self.sync_packages()
        pkg_to_install = []
        pkg_to_uninstall = []
        self.apply_button.set_sensitive(False)
        self.cancel_button.set_sensitive(False)
        fraction += encriment
        msg = 'Completed'
        GLib.idle_add(self.update_progress, self.progress, fraction, msg)
        sleep(1)
        self.progress.hide()
        GLib.idle_add(self.stop_apply_tread)

    def all_or_installed(self, widget, data):
        if widget.get_active():
            self.available_or_installed = data
            if data == 'available':
                avail = self.available_pkg['avail']
                msg = "Packages available:"
                self.pkg_statistic.set_text(f'<small>{msg} {avail}</small>')
                self.pkg_statistic.set_use_markup(True)
            else:
                installed = self.installed_pkg['avail']
                msg = "Installed packages:"
                self.pkg_statistic.set_text(f'<small>{msg} {installed}</small>')
                self.pkg_statistic.set_use_markup(True)
            self.entry.set_text('')
            self.update_pkg_store()
            print(data)

    def sync_orgin(self):
        self.pkg_origin = available_package_origin()

    def sync_packages(self):
        self.installed_origin = installed_package_origin()
        self.installed_pkg = installed_package_dictionary(self.installed_origin)
        self.available_pkg = available_package_dictionary(self.pkg_origin)

    def update_progress(self, progress, fraction, msg):
        progress.set_fraction(fraction)
        progress.set_text(msg)

    def initial_sync(self):
        self.pkg_statistic.set_text('<small>Syncing statistic</small>')
        self.pkg_statistic.set_use_markup(True)
        msg = 'syncing packages origins'
        GLib.idle_add(self.update_progress, self.progress, 0.1, msg)
        self.sync_orgin()
        msg = 'syncing packages data'
        GLib.idle_add(self.update_progress, self.progress, 0.4, msg)
        self.sync_packages()
        msg = 'store packages origin'
        GLib.idle_add(self.update_progress, self.progress, 0.8, msg)
        self.category_store_sync()
        avail = self.available_pkg['avail']
        msg = "Packages available:"
        self.pkg_statistic.set_text(f'<small>{msg} {avail}</small>')
        self.pkg_statistic.set_use_markup(True)
        msg = 'Completed'
        GLib.idle_add(self.update_progress, self.progress, 1.0,msg)
        sleep(1)
        self.progress.hide()
        GLib.idle_add(self.stop_tread)
        self.entry.set_sensitive(True)
        self.entry.set_visibility(True)
        self.available_toggle.set_sensitive(True)
        self.installed_toggle.set_sensitive(True)

    def stop_tread(self):
        self.thr.join()

    def initial_thread(self, sync):
        self.thr = threading.Thread(target=self.initial_sync, args=())
        self.thr.setDaemon(True)
        self.thr.start()

    def selected_software(self, view, event):
        selection = self.pkgtreeview.get_selection()
        (model, iter) = selection.get_selected()
        print(model[iter][1])
        self.show_description_window(model[iter][1])

    def search_release(self, widget, event):
        self.searchs = widget.get_text()
        if self.searchs == '':
            self.update_pkg_store()
        else:
            self.update_search()

    def update_search(self):
        pixbuf = Gtk.IconTheme.get_default().load_icon('emblem-package', 42, 0)
        if len(self.searchs) > 1:
            self.pkg_store.clear()
            # xmp = GdkPixbuf.Pixbuf.new_from_xpm_data(softwareXpm())
            for pkg in search_packages(self.searchs):
                version = self.available_pkg['all'][pkg]['version']
                size = self.available_pkg['all'][pkg]['size']
                comment = self.available_pkg['all'][pkg]['comment']
                if pkg in pkg_to_install:
                    installed = True
                elif pkg in pkg_to_uninstall:
                    installed = False
                else:
                    installed = self.available_pkg['all'][pkg]['installed']
                self.pkg_store.append([pixbuf, pkg, version, size, comment, installed])

    def category_store_sync(self):
        self.store.clear()
        self.entry.set_text('')
        for category in self.pkg_origin:
            xmp_data = xpmPackageCategory()[category]
            xmp = GdkPixbuf.Pixbuf.new_from_xpm_data(xmp_data)
            self.store.append([xmp, category])
        self.treeview.set_cursor(0)

    def selection_category(self, tree_selection):
        (model, pathlist) = tree_selection.get_selected_rows()
        path = pathlist[0]
        tree_iter = model.get_iter(path)
        self.categori = model.get_value(tree_iter, 1)
        self.update_pkg_store()

    def update_pkg_store(self):
        self.pkg_store.clear()
        pixbuf = Gtk.IconTheme.get_default().load_icon('emblem-package', 42, 0)
        # xmp = GdkPixbuf.Pixbuf.new_from_xpm_data(softwareXpm())
        if self.available_or_installed == 'available':
            pkg_d = self.available_pkg[self.categori]
        else:
            try:
                pkg_d = self.installed_pkg[self.categori]
            except KeyError:
                pkg_d = {}
        pkg_list = list(pkg_d.keys())
        for pkg in pkg_list:
            version = pkg_d[pkg]['version']
            size = pkg_d[pkg]['size']
            comment = pkg_d[pkg]['comment']
            if pkg in pkg_to_install:
                installed = True
            elif pkg in pkg_to_uninstall:
                installed = False
            else:
                installed = pkg_d[pkg]['installed']
            self.pkg_store.append([pixbuf, pkg, version, size, comment, installed])

    def add_and_rm_pkg(self, cell, path, model):
        model[path][5] = not model[path][5]
        pkg = model[path][1]
        if pkg not in pkg_to_uninstall and pkg not in pkg_to_install:
            if model[path][5] is False:
                pkg_to_uninstall.extend([pkg])
            else:
                pkg_to_install.extend([pkg])
        else:
            if pkg in pkg_to_uninstall and model[path][5] is True:
                pkg_to_uninstall.remove(pkg)
            elif pkg in pkg_to_install and model[path][5] is False:
                pkg_to_install.remove(pkg)
        if pkg not in pkg_to_uninstall and pkg not in pkg_to_install:
            self.apply_button.set_sensitive(False)
            self.cancel_button.set_sensitive(False)
        else:
            self.apply_button.set_sensitive(True)
            self.cancel_button.set_sensitive(True)
        print('package to install', pkg_to_install)
        print('package to uninstall', pkg_to_uninstall)

    def MainBook(self):
        self.table = Gtk.Table(n_rows=12, n_columns=10, homogeneous=True)
        self.table.show_all()
        category_sw = Gtk.ScrolledWindow()
        category_sw.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
        category_sw.set_policy(Gtk.PolicyType.AUTOMATIC,
                               Gtk.PolicyType.AUTOMATIC)
        self.store = Gtk.ListStore(GdkPixbuf.Pixbuf, str)
        self.treeview = Gtk.TreeView()
        self.treeview.set_model(self.store)
        # self.treeview.set_rules_hint(True)
        cell = Gtk.CellRendererPixbuf()
        column = Gtk.TreeViewColumn("Pixbuf", cell)
        column.add_attribute(cell, "pixbuf", 0)
        self.treeview.append_column(column)
        cell2 = Gtk.CellRendererText()
        column2 = Gtk.TreeViewColumn(None, cell2, text=0)
        column2.set_attributes(cell2, text=1)
        self.treeview.append_column(column2)
        self.treeview.set_reorderable(True)
        self.treeview.set_headers_visible(False)
        self.category_tree_selection = self.treeview.get_selection()
        self.category_tree_selection.set_mode(Gtk.SelectionMode.SINGLE)
        self.category_tree_selection.connect("changed", self.selection_category)
        category_sw.add(self.treeview)
        category_sw.show()

        pkg_sw = Gtk.ScrolledWindow()
        pkg_sw.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
        pkg_sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)
        self.pkg_store = Gtk.ListStore(GdkPixbuf.Pixbuf, str, str, str, str, bool)
        self.pkgtreeview = Gtk.TreeView()
        self.pkgtreeview.set_model(self.pkg_store)
        # self.pkgtreeview.set_rules_hint(True)
        # self.pkgtreeview.connect_after("button_press_event",
        #                                self.selected_software)
        self.pkgtreeview.connect_after("button_press_event",
                                       self.selected_software)
        self.check_cell = Gtk.CellRendererToggle()
        self.check_cell.set_property('activatable', True)
        self.check_cell.connect('toggled', self.add_and_rm_pkg, self.pkg_store)
        check_column = Gtk.TreeViewColumn("Check", self.check_cell)
        check_column.add_attribute(self.check_cell, "active", 5)
        self.pkgtreeview.append_column(check_column)
        pixbuf_cell = Gtk.CellRendererPixbuf()
        pixbuf_column = Gtk.TreeViewColumn('Icon', pixbuf_cell)
        pixbuf_column.add_attribute(pixbuf_cell, "pixbuf", 0)
        self.pkgtreeview.append_column(pixbuf_column)
        name_cell = Gtk.CellRendererText()
        name_column = Gtk.TreeViewColumn('Package Name', name_cell, text=1)
        # name_column.set_sizing(Gtk.TREE_VIEW_COLUMN_AUTOSIZE)
        name_column.set_fixed_width(250)
        name_column.set_sort_column_id(1)
        self.pkgtreeview.append_column(name_column)
        version_cell = Gtk.CellRendererText()
        version_column = Gtk.TreeViewColumn('Version', version_cell, text=2)
        version_column.set_fixed_width(150)
        version_column.set_sort_column_id(2)
        self.pkgtreeview.append_column(version_column)
        size_cell = Gtk.CellRendererText()
        size_column = Gtk.TreeViewColumn('Size', size_cell, text=3)
        size_column.set_fixed_width(150)
        size_column.set_sort_column_id(3)
        self.pkgtreeview.append_column(size_column)
        comment_cell = Gtk.CellRendererText()
        comment_column = Gtk.TreeViewColumn('Comment', comment_cell, text=4)
        comment_column.set_sort_column_id(4)
        self.pkgtreeview.append_column(comment_column)
        self.pkgtreeview.set_tooltip_column(5)
        self.pkg_tree_selection = self.pkgtreeview.get_selection()
        # self.pkg_tree_selection.set_mode(Gtk.SelectionMode.NONE)
        # tree_selection.connect("clicked", self.selected_software)
        pkg_sw.add(self.pkgtreeview)
        pkg_sw.show()
        self.table.attach(category_sw, 0, 2, 0, 12)
        self.table.attach(pkg_sw, 2, 10, 0, 12)
        self.show()
        return self.table

    def previous_button_clicked(self, event):
        self.mainstack.set_visible_child_name("mainwin")
        self.previousbutton.set_sensitive(False)

    def show_description_window(self, name: str):
        self.mainstack.set_visible_child_name("descwin")
        self.previousbutton.set_sensitive(True)
        self.previousbutton.connect("clicked", self.previous_button_clicked)
        self.set_description_window(name)

    def set_description_window(self, package: str):
        description = selected_package_description(package)
        dependencies = "Dependencies:\n"
        try:
            for dependency in selected_package_dependencies(package):
                dependencies += dependency + "\n"
        except TypeError:
            pass

        rdependencies = "Reverse dependencies:\n"
        try:
            for rdependency in selected_package_rdependencies(package):
                rdependencies += rdependency + "\n"
        except TypeError:
            pass

        self.app_label.set_text(package)
        self.description_label.set_text(description)
        self.dependencies_label.set_text(dependencies + "\n" + rdependencies)

    def DescriptionWindow(self):
        self.description_sw = Gtk.ScrolledWindow()
        self.description_sw.set_shadow_type(Gtk.ShadowType.ETCHED_IN)
        self.description_sw.set_policy(Gtk.PolicyType.AUTOMATIC, Gtk.PolicyType.AUTOMATIC)

        self.description_box = Gtk.VBox()
        self.description_sw.add(self.description_box)

        self.app_info_box = Gtk.HBox()
        pixbuf = Gtk.IconTheme.get_default().load_icon('emblem-package', 42, 0)
        self.app_icon = Gtk.Image.new_from_pixbuf(pixbuf)
        self.app_label = Gtk.Label()
        self.app_info_box.pack_start(self.app_icon, 0, 0, 0)
        self.app_info_box.pack_start(self.app_label, 0, 0, 0)
        hr = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)
        hr2 = Gtk.Separator(orientation=Gtk.Orientation.HORIZONTAL)

        self.description_label = Gtk.Label()
        self.dependencies_label = Gtk.Label()

        self.description_box.pack_start(self.app_info_box, 0, 0, 0)
        self.description_box.pack_start(hr, 0, 0, 0)
        self.description_box.pack_start(self.description_label, 1, 1, 1)
        self.description_box.pack_start(hr2, 0, 0, 0)
        self.description_box.pack_start(self.dependencies_label, 1, 1, 1)

        return self.description_sw


class not_root(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self)
        self.set_title("Software Station")
        self.connect("delete-event", Gtk.main_quit)
        self.set_size_request(200, 80)
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        self.add(box1)
        box1.show()
        label = Gtk.Label(label='You need to be root')
        box1.pack_start(label, True, True, 0)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        box1.pack_end(hBox, False, False, 5)
        ok_button = Gtk.Button()
        ok_button.set_label("OK")
        apply_img = Gtk.Image()
        apply_img.set_from_icon_name('gtk-ok', 1)
        ok_button.set_image(apply_img)
        ok_button.connect("clicked", Gtk.main_quit)
        hBox.pack_end(ok_button, False, False, 5)
        self.show_all()


class confirmation(Gtk.Window):

    def confirm_passwd(self, widget, user):
        pwd_hash = pwd.getpwnam(user).pw_passwd
        password = self.passwd.get_text()
        if crypt.crypt(password, pwd_hash) == pwd_hash:
            self.hide()
            TableWindow()
        else:
            self.hide()
            self.wrong_password()

    def wrong_password(self):
        window = Gtk.Window()
        window.set_title("Software Station")
        window.connect("delete-event", Gtk.main_quit)
        window.set_size_request(200, 80)
        box1 = Gtk.VBox(homogeneous=False, spacing=0)
        window.add(box1)
        box1.show()
        label = Gtk.Label(label='Wrong password')
        box1.pack_start(label, True, True, 0)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        box1.pack_end(hBox, False, False, 5)
        ok_button = Gtk.Button()
        ok_button.set_label("OK")
        apply_img = Gtk.Image()
        apply_img.set_from_icon_name('gtk-ok', 1)
        ok_button.set_image(apply_img)
        ok_button.connect("clicked", Gtk.main_quit)
        hBox.pack_end(ok_button, False, False, 5)
        window.show_all()

    def __init__(self, user):
        Gtk.Window.__init__(self)
        self.set_title("Software Station")
        self.connect("delete-event", Gtk.main_quit)
        self.set_size_request(200, 80)
        vBox = Gtk.VBox(homogeneous=False, spacing=0)
        self.add(vBox)
        vBox.show()
        label = Gtk.Label(label=f'Confirm {user} password: ')
        vBox.pack_start(label, True, True, 5)
        self.passwd = Gtk.Entry()
        self.passwd.set_visibility(False)
        self.passwd.connect("activate", self.confirm_passwd, user)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        vBox.pack_start(hBox, False, False, 5)
        hBox.pack_start(self.passwd, True, True, 20)
        hBox = Gtk.HBox(homogeneous=False, spacing=0)
        hBox.show()
        vBox.pack_end(hBox, False, False, 5)
        ok_button = Gtk.Button()
        ok_button.set_label("OK")
        apply_img = Gtk.Image()
        apply_img.set_from_icon_name('gtk-ok', 1)
        ok_button.set_image(apply_img)
        ok_button.connect("clicked", self.confirm_passwd, user)
        hBox.pack_end(ok_button, False, False, 5)
        self.show_all()


if os.geteuid() == 0:
    user = os.getenv("SUDO_USER")
    if user is None:
        TableWindow()
    else:
        confirmation(user)
else:
    not_root()

Gtk.main()
